// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RoleStatus {
  admin
  user
  moderator
}

model User {
  id                          String          @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  username                    String
  email                       String?         @unique
  phone                       String?
  emailVerified               DateTime?
  image                       String?
  password                    String?
  verifiedToken               String?
  resetPasswordToken          String?
  verifiedTokenExpiresAt      DateTime?
  resetPasswordTokenExpiresAt DateTime?
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  WorkSpaceUser               WorkSpaceUser[]
  ChannelUser                 ChannelUser[]
  Message                     Message[]
}

model WorkSpace {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  image         String?
  slug          String?         @unique
  createdAt     DateTime        @default(now())
  lastMessageAt DateTime        @default(now())
  channel       Channel[]
  users         WorkSpaceUser[]
  Message       Message[]
}

model WorkSpaceUser {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())
  workspaceid String     @db.ObjectId
  role        RoleStatus @default(user)
  workspace   WorkSpace  @relation(fields: [workspaceid], references: [id])
  userid      String     @db.ObjectId
  user        User       @relation(fields: [userid], references: [id])
}

model Channel {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  createdAt   DateTime      @default(now())
  workspaceid String        @db.ObjectId
  workspace   WorkSpace     @relation(fields: [workspaceid], references: [id])
  user        ChannelUser[]
  Message     Message[]
}

model ChannelUser {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  channelid   String   @db.ObjectId
  channel     Channel  @relation(fields: [channelid], references: [id])
  userid      String   @db.ObjectId
  user        User     @relation(fields: [userid], references: [id])
}

model Message {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  body        String?
  image       String?
  channelid   String    @db.ObjectId
  channel     Channel   @relation(fields: [channelid], references: [id])
  userid      String    @db.ObjectId
  user        User      @relation(fields: [userid], references: [id])
  createdAt   DateTime  @default(now())
  workspaceid String    @db.ObjectId
  workspace   WorkSpace @relation(fields: [workspaceid], references: [id])
}
